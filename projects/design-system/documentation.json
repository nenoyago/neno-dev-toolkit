{
    "pipes": [],
    "interfaces": [
        {
            "name": "IconBaseComponentProps",
            "id": "interface-IconBaseComponentProps-1f75c2fcee7c9a0fe1b7353d242fa57e6969499ef6087c554e42ded179e01772b8744217dc181d3c2e86d101111fcec55b42fdc5e72141c6dcef2e5f848483a5",
            "file": "projects/design-system/components/src/icon/icon.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NgClass, NgComponentOutlet } from '@angular/common';\nimport { Component, inject, Injector, input, InputSignal } from '@angular/core';\n\nimport { provideIcons, IconName as NgIconName, NgIcon } from '@ng-icons/core';\n\nconst AVAILABLE_ICONS_IMPORT = [\n  import('@ng-icons/heroicons/outline'),\n  import('@ng-icons/lucide')\n];\n\ntype HeroIconName = Extract<\n  Exclude<\n    NgIconName,\n    `hero${string}Solid` | `hero${string}Mini` | `hero${string}Micro`\n  >,\n  `hero${string}`\n>;\n\ntype LucideIconName = Extract<NgIconName, `lucide${string}`>;\n\ntype IconName = HeroIconName | LucideIconName;\n\nexport type IconInput = IconName | (string & {});\n\ninterface IconBaseComponentProps {\n  name: InputSignal<IconInput>;\n  size: InputSignal<string>;\n  strokeWidth?: InputSignal<number>;\n  class?: InputSignal<string>;\n  ngClass?: InputSignal<string | string[] | Record<string, boolean>>;\n  style?: InputSignal<Record<string, string>>;\n}\n\n@Component({\n  standalone: true,\n  template: ''\n})\nabstract class IconBaseComponent implements IconBaseComponentProps {\n  readonly name = input.required<IconInput>();\n  readonly size = input<string>('');\n  readonly strokeWidth = input<number>(1.5);\n  readonly class = input<string>('');\n  readonly ngClass = input<string | string[] | Record<string, boolean>>('');\n  readonly style = input<Record<string, string>>({});\n}\n\n@Component({\n  selector: 'liv-icon-render',\n  imports: [NgIcon, NgClass],\n  template: `\n    @if (name(); as name) {\n      <ng-icon\n        [name]=\"name\"\n        [size]=\"size()\"\n        [strokeWidth]=\"strokeWidth()\"\n        [class]=\"class()\"\n        [ngClass]=\"ngClass()\"\n        [style]=\"style()\"\n      />\n    }\n  `\n})\nclass IconRenderComponent extends IconBaseComponent {}\n\n@Component({\n  selector: 'liv-icon',\n  imports: [NgComponentOutlet],\n  templateUrl: './icon.component.html',\n  styleUrl: './icon.component.css'\n})\nexport class IconComponent extends IconBaseComponent {\n  private readonly parentInjector = inject(Injector);\n\n  protected injector: Injector | null = null;\n  protected child = IconRenderComponent;\n\n  async ngOnInit() {\n    const name = this.name();\n\n    if (!name) {\n      this.injector = this.parentInjector;\n      throw new Error('Icon name is required');\n    }\n\n    const isCustomIcon =\n      typeof name === 'string' &&\n      !name.startsWith('hero') &&\n      !name.startsWith('lucide');\n\n    if (isCustomIcon) {\n      this.injector = Injector.create({\n        providers: [],\n        parent: this.parentInjector\n      });\n      return;\n    }\n\n    try {\n      // @ts-ignore\n      for await (const { [name]: icon } of AVAILABLE_ICONS_IMPORT) {\n        if (icon) {\n          this.injector = Injector.create({\n            providers: [provideIcons({ [name]: icon })],\n            parent: this.parentInjector\n          });\n          break;\n        }\n        this.injector = this.parentInjector;\n      }\n    } catch (err) {\n      console.error('Error loading icon:', err);\n      this.injector = this.parentInjector;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<IconInput>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "ngClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string | [] | Record>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "strokeWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<number>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<Record<string, string>>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-81155bfae41179074c961c684bb316a8ee6dfe87025513f513361d72e23ad8cf34c40d6bd234c0a0a09bbff4f23ff2546fd3e095828e5be76fe0a0b66f0c9491",
            "file": "projects/design-system/components/src/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[liv-button]",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "NgpButton",
                    "inputs": [
                        "disabled"
                    ],
                    "outputs": []
                }
            ],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false, {    transform: booleanAttribute  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "formId",
                    "defaultValue": "'', {    transform: (value) => (value === null ? '' : value)  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "htmlType",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "rounded",
                    "defaultValue": "false, {    transform: booleanAttribute  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Variant",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgpButton"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { booleanAttribute, Component, input } from '@angular/core';\n\nimport { NgpButton } from 'ng-primitives/button';\n\ntype Variant = 'primary' | 'secondary';\n\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'button[liv-button]',\n  imports: [NgpButton],\n  template: '<ng-content></ng-content>',\n  styleUrl: './button.component.css',\n  host: {\n    '[attr.type]': 'htmlType()',\n    '[attr.form]': 'formId()',\n    '[class]':\n      '\"liv-button liv-button--\" + variant() + (rounded() ? \" liv-button--rounded\" : \"\")'\n  },\n  hostDirectives: [{ directive: NgpButton, inputs: ['disabled'] }]\n})\nexport class ButtonComponent {\n  readonly variant = input<Variant>('primary');\n  readonly disabled = input(false, {\n    transform: booleanAttribute\n  });\n  readonly formId = input('', {\n    transform: (value) => (value === null ? '' : value)\n  });\n  readonly htmlType = input<'button' | 'submit' | 'reset'>('button');\n  readonly rounded = input(false, {\n    transform: booleanAttribute\n  });\n}\n",
            "styleUrl": "./button.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "IconBaseComponent",
            "id": "component-IconBaseComponent-1f75c2fcee7c9a0fe1b7353d242fa57e6969499ef6087c554e42ded179e01772b8744217dc181d3c2e86d101111fcec55b42fdc5e72141c6dcef2e5f848483a5",
            "file": "projects/design-system/components/src/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconInput",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                },
                {
                    "name": "ngClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[] | Record<string, boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "strokeWidth",
                    "defaultValue": "1.5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                },
                {
                    "name": "style",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string, string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        148
                    ],
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass, NgComponentOutlet } from '@angular/common';\nimport { Component, inject, Injector, input, InputSignal } from '@angular/core';\n\nimport { provideIcons, IconName as NgIconName, NgIcon } from '@ng-icons/core';\n\nconst AVAILABLE_ICONS_IMPORT = [\n  import('@ng-icons/heroicons/outline'),\n  import('@ng-icons/lucide')\n];\n\ntype HeroIconName = Extract<\n  Exclude<\n    NgIconName,\n    `hero${string}Solid` | `hero${string}Mini` | `hero${string}Micro`\n  >,\n  `hero${string}`\n>;\n\ntype LucideIconName = Extract<NgIconName, `lucide${string}`>;\n\ntype IconName = HeroIconName | LucideIconName;\n\nexport type IconInput = IconName | (string & {});\n\ninterface IconBaseComponentProps {\n  name: InputSignal<IconInput>;\n  size: InputSignal<string>;\n  strokeWidth?: InputSignal<number>;\n  class?: InputSignal<string>;\n  ngClass?: InputSignal<string | string[] | Record<string, boolean>>;\n  style?: InputSignal<Record<string, string>>;\n}\n\n@Component({\n  standalone: true,\n  template: ''\n})\nabstract class IconBaseComponent implements IconBaseComponentProps {\n  readonly name = input.required<IconInput>();\n  readonly size = input<string>('');\n  readonly strokeWidth = input<number>(1.5);\n  readonly class = input<string>('');\n  readonly ngClass = input<string | string[] | Record<string, boolean>>('');\n  readonly style = input<Record<string, string>>({});\n}\n\n@Component({\n  selector: 'liv-icon-render',\n  imports: [NgIcon, NgClass],\n  template: `\n    @if (name(); as name) {\n      <ng-icon\n        [name]=\"name\"\n        [size]=\"size()\"\n        [strokeWidth]=\"strokeWidth()\"\n        [class]=\"class()\"\n        [ngClass]=\"ngClass()\"\n        [style]=\"style()\"\n      />\n    }\n  `\n})\nclass IconRenderComponent extends IconBaseComponent {}\n\n@Component({\n  selector: 'liv-icon',\n  imports: [NgComponentOutlet],\n  templateUrl: './icon.component.html',\n  styleUrl: './icon.component.css'\n})\nexport class IconComponent extends IconBaseComponent {\n  private readonly parentInjector = inject(Injector);\n\n  protected injector: Injector | null = null;\n  protected child = IconRenderComponent;\n\n  async ngOnInit() {\n    const name = this.name();\n\n    if (!name) {\n      this.injector = this.parentInjector;\n      throw new Error('Icon name is required');\n    }\n\n    const isCustomIcon =\n      typeof name === 'string' &&\n      !name.startsWith('hero') &&\n      !name.startsWith('lucide');\n\n    if (isCustomIcon) {\n      this.injector = Injector.create({\n        providers: [],\n        parent: this.parentInjector\n      });\n      return;\n    }\n\n    try {\n      // @ts-ignore\n      for await (const { [name]: icon } of AVAILABLE_ICONS_IMPORT) {\n        if (icon) {\n          this.injector = Injector.create({\n            providers: [provideIcons({ [name]: icon })],\n            parent: this.parentInjector\n          });\n          break;\n        }\n        this.injector = this.parentInjector;\n      }\n    } catch (err) {\n      console.error('Error loading icon:', err);\n      this.injector = this.parentInjector;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IconBaseComponentProps"
            ]
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-1f75c2fcee7c9a0fe1b7353d242fa57e6969499ef6087c554e42ded179e01772b8744217dc181d3c2e86d101111fcec55b42fdc5e72141c6dcef2e5f848483a5",
            "file": "projects/design-system/components/src/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "liv-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ],
                    "required": false,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconInput",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        148
                    ],
                    "required": true,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                },
                {
                    "name": "ngClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[] | Record<string, boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        148
                    ],
                    "required": false,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        148
                    ],
                    "required": false,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                },
                {
                    "name": "strokeWidth",
                    "defaultValue": "1.5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        148
                    ],
                    "required": false,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                },
                {
                    "name": "style",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string, string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        148
                    ],
                    "required": false,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "child",
                    "defaultValue": "IconRenderComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "injector",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Injector | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "parentInjector",
                    "defaultValue": "inject(Injector)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgComponentOutlet",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass, NgComponentOutlet } from '@angular/common';\nimport { Component, inject, Injector, input, InputSignal } from '@angular/core';\n\nimport { provideIcons, IconName as NgIconName, NgIcon } from '@ng-icons/core';\n\nconst AVAILABLE_ICONS_IMPORT = [\n  import('@ng-icons/heroicons/outline'),\n  import('@ng-icons/lucide')\n];\n\ntype HeroIconName = Extract<\n  Exclude<\n    NgIconName,\n    `hero${string}Solid` | `hero${string}Mini` | `hero${string}Micro`\n  >,\n  `hero${string}`\n>;\n\ntype LucideIconName = Extract<NgIconName, `lucide${string}`>;\n\ntype IconName = HeroIconName | LucideIconName;\n\nexport type IconInput = IconName | (string & {});\n\ninterface IconBaseComponentProps {\n  name: InputSignal<IconInput>;\n  size: InputSignal<string>;\n  strokeWidth?: InputSignal<number>;\n  class?: InputSignal<string>;\n  ngClass?: InputSignal<string | string[] | Record<string, boolean>>;\n  style?: InputSignal<Record<string, string>>;\n}\n\n@Component({\n  standalone: true,\n  template: ''\n})\nabstract class IconBaseComponent implements IconBaseComponentProps {\n  readonly name = input.required<IconInput>();\n  readonly size = input<string>('');\n  readonly strokeWidth = input<number>(1.5);\n  readonly class = input<string>('');\n  readonly ngClass = input<string | string[] | Record<string, boolean>>('');\n  readonly style = input<Record<string, string>>({});\n}\n\n@Component({\n  selector: 'liv-icon-render',\n  imports: [NgIcon, NgClass],\n  template: `\n    @if (name(); as name) {\n      <ng-icon\n        [name]=\"name\"\n        [size]=\"size()\"\n        [strokeWidth]=\"strokeWidth()\"\n        [class]=\"class()\"\n        [ngClass]=\"ngClass()\"\n        [style]=\"style()\"\n      />\n    }\n  `\n})\nclass IconRenderComponent extends IconBaseComponent {}\n\n@Component({\n  selector: 'liv-icon',\n  imports: [NgComponentOutlet],\n  templateUrl: './icon.component.html',\n  styleUrl: './icon.component.css'\n})\nexport class IconComponent extends IconBaseComponent {\n  private readonly parentInjector = inject(Injector);\n\n  protected injector: Injector | null = null;\n  protected child = IconRenderComponent;\n\n  async ngOnInit() {\n    const name = this.name();\n\n    if (!name) {\n      this.injector = this.parentInjector;\n      throw new Error('Icon name is required');\n    }\n\n    const isCustomIcon =\n      typeof name === 'string' &&\n      !name.startsWith('hero') &&\n      !name.startsWith('lucide');\n\n    if (isCustomIcon) {\n      this.injector = Injector.create({\n        providers: [],\n        parent: this.parentInjector\n      });\n      return;\n    }\n\n    try {\n      // @ts-ignore\n      for await (const { [name]: icon } of AVAILABLE_ICONS_IMPORT) {\n        if (icon) {\n          this.injector = Injector.create({\n            providers: [provideIcons({ [name]: icon })],\n            parent: this.parentInjector\n          });\n          break;\n        }\n        this.injector = this.parentInjector;\n      }\n    } catch (err) {\n      console.error('Error loading icon:', err);\n      this.injector = this.parentInjector;\n    }\n  }\n}\n",
            "styleUrl": "./icon.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "IconBaseComponent"
            ],
            "templateData": "@if (injector; as inj) {\n  <ng-container\n    *ngComponentOutlet=\"\n      child;\n      injector: inj;\n      inputs: {\n        name: name(),\n        size: size(),\n        strokeWidth: strokeWidth(),\n        class: class(),\n        ngClass: ngClass(),\n        style: style()\n      }\n    \"\n  />\n}\n"
        },
        {
            "name": "IconRenderComponent",
            "id": "component-IconRenderComponent-1f75c2fcee7c9a0fe1b7353d242fa57e6969499ef6087c554e42ded179e01772b8744217dc181d3c2e86d101111fcec55b42fdc5e72141c6dcef2e5f848483a5",
            "file": "projects/design-system/components/src/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "liv-icon-render",
            "styleUrls": [],
            "styles": [],
            "template": "@if (name(); as name) {\n  <ng-icon\n    [name]=\"name\"\n    [size]=\"size()\"\n    [strokeWidth]=\"strokeWidth()\"\n    [class]=\"class()\"\n    [ngClass]=\"ngClass()\"\n    [style]=\"style()\"\n  />\n}\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "class",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ],
                    "required": false,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconInput",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        148
                    ],
                    "required": true,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                },
                {
                    "name": "ngClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[] | Record<string, boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        148
                    ],
                    "required": false,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        148
                    ],
                    "required": false,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                },
                {
                    "name": "strokeWidth",
                    "defaultValue": "1.5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        148
                    ],
                    "required": false,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                },
                {
                    "name": "style",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string, string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        148
                    ],
                    "required": false,
                    "inheritance": {
                        "file": "IconBaseComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "NgIcon"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NgClass, NgComponentOutlet } from '@angular/common';\nimport { Component, inject, Injector, input, InputSignal } from '@angular/core';\n\nimport { provideIcons, IconName as NgIconName, NgIcon } from '@ng-icons/core';\n\nconst AVAILABLE_ICONS_IMPORT = [\n  import('@ng-icons/heroicons/outline'),\n  import('@ng-icons/lucide')\n];\n\ntype HeroIconName = Extract<\n  Exclude<\n    NgIconName,\n    `hero${string}Solid` | `hero${string}Mini` | `hero${string}Micro`\n  >,\n  `hero${string}`\n>;\n\ntype LucideIconName = Extract<NgIconName, `lucide${string}`>;\n\ntype IconName = HeroIconName | LucideIconName;\n\nexport type IconInput = IconName | (string & {});\n\ninterface IconBaseComponentProps {\n  name: InputSignal<IconInput>;\n  size: InputSignal<string>;\n  strokeWidth?: InputSignal<number>;\n  class?: InputSignal<string>;\n  ngClass?: InputSignal<string | string[] | Record<string, boolean>>;\n  style?: InputSignal<Record<string, string>>;\n}\n\n@Component({\n  standalone: true,\n  template: ''\n})\nabstract class IconBaseComponent implements IconBaseComponentProps {\n  readonly name = input.required<IconInput>();\n  readonly size = input<string>('');\n  readonly strokeWidth = input<number>(1.5);\n  readonly class = input<string>('');\n  readonly ngClass = input<string | string[] | Record<string, boolean>>('');\n  readonly style = input<Record<string, string>>({});\n}\n\n@Component({\n  selector: 'liv-icon-render',\n  imports: [NgIcon, NgClass],\n  template: `\n    @if (name(); as name) {\n      <ng-icon\n        [name]=\"name\"\n        [size]=\"size()\"\n        [strokeWidth]=\"strokeWidth()\"\n        [class]=\"class()\"\n        [ngClass]=\"ngClass()\"\n        [style]=\"style()\"\n      />\n    }\n  `\n})\nclass IconRenderComponent extends IconBaseComponent {}\n\n@Component({\n  selector: 'liv-icon',\n  imports: [NgComponentOutlet],\n  templateUrl: './icon.component.html',\n  styleUrl: './icon.component.css'\n})\nexport class IconComponent extends IconBaseComponent {\n  private readonly parentInjector = inject(Injector);\n\n  protected injector: Injector | null = null;\n  protected child = IconRenderComponent;\n\n  async ngOnInit() {\n    const name = this.name();\n\n    if (!name) {\n      this.injector = this.parentInjector;\n      throw new Error('Icon name is required');\n    }\n\n    const isCustomIcon =\n      typeof name === 'string' &&\n      !name.startsWith('hero') &&\n      !name.startsWith('lucide');\n\n    if (isCustomIcon) {\n      this.injector = Injector.create({\n        providers: [],\n        parent: this.parentInjector\n      });\n      return;\n    }\n\n    try {\n      // @ts-ignore\n      for await (const { [name]: icon } of AVAILABLE_ICONS_IMPORT) {\n        if (icon) {\n          this.injector = Injector.create({\n            providers: [provideIcons({ [name]: icon })],\n            parent: this.parentInjector\n          });\n          break;\n        }\n        this.injector = this.parentInjector;\n      }\n    } catch (err) {\n      console.error('Error loading icon:', err);\n      this.injector = this.parentInjector;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "IconBaseComponent"
            ]
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "AVAILABLE_ICONS_IMPORT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/components/src/icon/icon.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  import('@ng-icons/heroicons/outline'),\n  import('@ng-icons/lucide')\n]"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/.storybook/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StorybookConfig",
                "defaultValue": "{\n  stories: [\n    '../components/src/**/*.mdx',\n    '../components/src/**/*.stories.@(js|jsx|mjs|ts|tsx)'\n  ],\n  addons: [\n    '@storybook/addon-docs',\n    '@chromatic-com/storybook',\n    '@storybook/addon-styling-webpack'\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {}\n  }\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/components/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<ButtonStory>",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: true,\n    htmlType: 'button',\n    content: 'Disabled Button'\n  }\n}"
            },
            {
                "name": "heroIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'heroArrowDown',\n  'heroArrowLeft',\n  'heroArrowRight',\n  'heroArrowUp',\n  'heroArrowUpCircle',\n  'heroArrowUpTray',\n  'heroArrowUturnDown',\n  'heroArrowUturnLeft',\n  'heroArrowUturnRight',\n  'heroArrowUturnUp'\n]"
            },
            {
                "name": "HeroIconsShowcase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n        ${heroIcons.map((name) => `<liv-icon name=\"${name}\" />`).join('')}\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "lucideIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'lucideAlignJustify',\n  'lucideAmbulance',\n  'lucideAmpersand',\n  'lucideAnchor',\n  'lucideAngry',\n  'lucideAnnoyed',\n  'lucideAntenna',\n  'lucideAnvil',\n  'lucideAperture',\n  'lucideApple'\n]"
            },
            {
                "name": "LucideIconsShowcase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  args: {\n    class: '',\n    style: 'color: red;'\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n        ${lucideIcons.map((name) => `<liv-icon name=\"${name}\" />`).join('')}\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/components/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonStory>",
                "defaultValue": "{\n  title: 'Components/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary']\n    },\n    disabled: { control: 'boolean' },\n    htmlType: {\n      control: { type: 'select' },\n      options: ['button', 'submit', 'reset']\n    }\n  },\n  args: {\n    variant: 'primary',\n    disabled: false\n  },\n  render: (args) => ({\n    props: args,\n    template: `<button liv-button [variant]=\"variant\" [disabled]=\"disabled\">{{content}}</button>`\n  })\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<IconStory>",
                "defaultValue": "{\n  title: 'Components/Icon',\n  component: IconComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    name: {\n      control: {\n        type: 'text'\n      }\n    },\n    size: {\n      control: {\n        type: 'text'\n      }\n    },\n    strokeWidth: {\n      control: { type: 'number' }\n    },\n    class: {\n      control: { type: 'text' }\n    },\n    ngClass: {\n      control: { type: 'object' }\n    },\n    style: {\n      control: { type: 'text' }\n    }\n  }\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i\n      }\n    }\n  }\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/components/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<ButtonStory>",
                "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: false,\n    htmlType: 'button',\n    content: 'Primary Button'\n  }\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system/components/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<ButtonStory>",
                "defaultValue": "{\n  args: {\n    variant: 'secondary',\n    disabled: false,\n    htmlType: 'button',\n    content: 'Secondary Button'\n  }\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonStory",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/design-system/components/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 194
            },
            {
                "name": "HeroIconName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Extract<Exclude<NgIconName, template literal type | template literal type | template literal type> | template literal type>",
                "file": "projects/design-system/components/src/icon/icon.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "IconInput",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IconName | ",
                "file": "projects/design-system/components/src/icon/icon.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "IconName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "HeroIconName | LucideIconName",
                "file": "projects/design-system/components/src/icon/icon.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "IconStory",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IconComponent",
                "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "LucideIconName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Extract<NgIconName | template literal type>",
                "file": "projects/design-system/components/src/icon/icon.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "StoryArgs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/design-system/components/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "Variant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\"",
                "file": "projects/design-system/components/src/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/design-system/components/src/icon/icon.component.ts": [
                {
                    "name": "AVAILABLE_ICONS_IMPORT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/components/src/icon/icon.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  import('@ng-icons/heroicons/outline'),\n  import('@ng-icons/lucide')\n]"
                }
            ],
            "projects/design-system/.storybook/main.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/.storybook/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorybookConfig",
                    "defaultValue": "{\n  stories: [\n    '../components/src/**/*.mdx',\n    '../components/src/**/*.stories.@(js|jsx|mjs|ts|tsx)'\n  ],\n  addons: [\n    '@storybook/addon-docs',\n    '@chromatic-com/storybook',\n    '@storybook/addon-styling-webpack'\n  ],\n  framework: {\n    name: '@storybook/angular',\n    options: {}\n  }\n}"
                }
            ],
            "projects/design-system/components/src/button/button.component.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/components/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<ButtonStory>",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: true,\n    htmlType: 'button',\n    content: 'Disabled Button'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/components/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonStory>",
                    "defaultValue": "{\n  title: 'Components/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary']\n    },\n    disabled: { control: 'boolean' },\n    htmlType: {\n      control: { type: 'select' },\n      options: ['button', 'submit', 'reset']\n    }\n  },\n  args: {\n    variant: 'primary',\n    disabled: false\n  },\n  render: (args) => ({\n    props: args,\n    template: `<button liv-button [variant]=\"variant\" [disabled]=\"disabled\">{{content}}</button>`\n  })\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/components/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<ButtonStory>",
                    "defaultValue": "{\n  args: {\n    variant: 'primary',\n    disabled: false,\n    htmlType: 'button',\n    content: 'Primary Button'\n  }\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/components/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<ButtonStory>",
                    "defaultValue": "{\n  args: {\n    variant: 'secondary',\n    disabled: false,\n    htmlType: 'button',\n    content: 'Secondary Button'\n  }\n}"
                }
            ],
            "projects/design-system/components/src/icon/icon.component.stories.ts": [
                {
                    "name": "heroIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'heroArrowDown',\n  'heroArrowLeft',\n  'heroArrowRight',\n  'heroArrowUp',\n  'heroArrowUpCircle',\n  'heroArrowUpTray',\n  'heroArrowUturnDown',\n  'heroArrowUturnLeft',\n  'heroArrowUturnRight',\n  'heroArrowUturnUp'\n]"
                },
                {
                    "name": "HeroIconsShowcase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n        ${heroIcons.map((name) => `<liv-icon name=\"${name}\" />`).join('')}\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "lucideIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'lucideAlignJustify',\n  'lucideAmbulance',\n  'lucideAmpersand',\n  'lucideAnchor',\n  'lucideAngry',\n  'lucideAnnoyed',\n  'lucideAntenna',\n  'lucideAnvil',\n  'lucideAperture',\n  'lucideApple'\n]"
                },
                {
                    "name": "LucideIconsShowcase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  args: {\n    class: '',\n    style: 'color: red;'\n  },\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 16px; flex-wrap: wrap;\">\n        ${lucideIcons.map((name) => `<liv-icon name=\"${name}\" />`).join('')}\n      </div>\n    `\n  })\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<IconStory>",
                    "defaultValue": "{\n  title: 'Components/Icon',\n  component: IconComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    name: {\n      control: {\n        type: 'text'\n      }\n    },\n    size: {\n      control: {\n        type: 'text'\n      }\n    },\n    strokeWidth: {\n      control: { type: 'number' }\n    },\n    class: {\n      control: { type: 'text' }\n    },\n    ngClass: {\n      control: { type: 'object' }\n    },\n    style: {\n      control: { type: 'text' }\n    }\n  }\n}"
                }
            ],
            "projects/design-system/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i\n      }\n    }\n  }\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/design-system/components/src/button/button.component.stories.ts": [
                {
                    "name": "ButtonStory",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/design-system/components/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 194
                },
                {
                    "name": "StoryArgs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/design-system/components/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                }
            ],
            "projects/design-system/components/src/icon/icon.component.ts": [
                {
                    "name": "HeroIconName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Extract<Exclude<NgIconName, template literal type | template literal type | template literal type> | template literal type>",
                    "file": "projects/design-system/components/src/icon/icon.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "IconInput",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IconName | ",
                    "file": "projects/design-system/components/src/icon/icon.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "IconName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "HeroIconName | LucideIconName",
                    "file": "projects/design-system/components/src/icon/icon.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                },
                {
                    "name": "LucideIconName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Extract<NgIconName | template literal type>",
                    "file": "projects/design-system/components/src/icon/icon.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/design-system/components/src/icon/icon.component.stories.ts": [
                {
                    "name": "IconStory",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IconComponent",
                    "file": "projects/design-system/components/src/icon/icon.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/design-system/components/src/button/button.component.ts": [
                {
                    "name": "Variant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\"",
                    "file": "projects/design-system/components/src/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": []
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/design-system/.storybook/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/button/button.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/button/button.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StoryArgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/button/button.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Variant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "heroIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeroIconsShowcase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lucideIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LucideIconsShowcase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IconStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconBaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconRenderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IconBaseComponentProps",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AVAILABLE_ICONS_IMPORT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "HeroIconName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IconInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IconName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system/components/src/icon/icon.component.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LucideIconName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}