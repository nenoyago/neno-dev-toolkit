name: 🦋 Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  CI: true
  HUSKY: 0

permissions:
  contents: write
  pull-requests: write

jobs:
  version-and-pr:
    name: 📝 Version Packages & Create Release PR
    environment: Semver
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
      should_publish: ${{ steps.check.outputs.should_publish }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.6.5

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🌿 Create release branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions@users.noreply.github.com"
          NEW_BRANCH="release/auto-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $NEW_BRANCH
          echo "NEW_BRANCH=$NEW_BRANCH" >> $GITHUB_ENV

      - name: 📝 Check for changesets
        id: check
        run: |
          # Verifica se existem changesets
          if [ ! "$(ls -A .changeset/*.md 2>/dev/null | grep -v 'README.md' | grep -v 'config.json')" ]; then
            echo "✅ No changesets found"
            echo "CHANGES=false" >> $GITHUB_ENV
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "should_publish=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Verifica se há changesets vazios (apenas com empty: true)
          EMPTY_COUNT=0
          REAL_COUNT=0

          for file in .changeset/*.md; do
            if [ "$file" = ".changeset/README.md" ]; then
              continue
            fi
            
            # Verifica se o changeset tem pacotes listados (não é vazio)
            if grep -q "^'@" "$file" 2>/dev/null || grep -q '^"@' "$file" 2>/dev/null; then
              REAL_COUNT=$((REAL_COUNT + 1))
            else
              EMPTY_COUNT=$((EMPTY_COUNT + 1))
            fi
          done

          echo "📊 Changesets encontrados:"
          echo "  - Real changesets: $REAL_COUNT"
          echo "  - Empty changesets: $EMPTY_COUNT"

          if [ $REAL_COUNT -eq 0 ]; then
            echo "🧹 Only empty changesets found - will clean them up"
            echo "CHANGES=true" >> $GITHUB_ENV
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "🚀 Real changesets found, proceeding with release"
            echo "CHANGES=true" >> $GITHUB_ENV
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Version packages
        if: env.CHANGES == 'true'
        run: pnpm changeset version

      - name: 💾 Commit version changes
        if: env.CHANGES == 'true'
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "✅ No changes to commit"
          else
            if [ "${{ steps.check.outputs.should_publish }}" = "true" ]; then
              git commit -m "release: 🔖 update package versions [skip ci]"
            else
              git commit -m "chore: 🤖 remove empty changesets [skip ci]"
            fi
            echo "📦 Changes committed"
          fi

      - name: ⬆️ Push release branch
        if: env.CHANGES == 'true'
        run: git push origin $NEW_BRANCH

      - name: 🏷️ Ensure release labels exist
        if: env.CHANGES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh label create "🤖 automated" --color A855F7 --description "Automated changes" --force || true
          gh label create "🚀 release" --color 22C55E --description "Package releases" --force || true
          gh label create "🧹 chore" --color F59E0B --description "Maintenance and cleanup tasks" --force || true
          gh label create "👷 ci" --color 3B82F6 --description "CI/CD changes" --force || true

      - name: 📬 Create Release PR
        if: env.CHANGES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "🔄 Creating pull request for branch: $NEW_BRANCH"

          # Define o título e labels baseado no tipo de changeset
          if [ "${{ steps.check.outputs.should_publish }}" = "true" ]; then
            TITLE="release: 🔖 automated package version updates"
            BODY="## 📦 Automated Package Release

          This PR contains automated version updates based on changesets.

          ### 🔄 Changes
          - 🔖 Version bumps for affected packages
          - 📝 Updated CHANGELOG files
          - ✅ Ready for publication

          ### ⚙️ Workflow
          - Generated by: GitHub Actions
          - Trigger: Changesets detected in main branch
          - Next step: Automatic publication after merge

          ---
          *🤖 This is an automated pull request created by the release workflow*"
            LABELS="🤖 automated,🚀 release,👷 ci"
          else
            TITLE="chore: 🤖 remove empty changesets"
            BODY="## 🧹 Changesets Cleanup

          This PR removes empty changesets that don't contain any package changes.

          ### 🔄 Changes
          - ⚰️ Remove empty changeset files
          - ❌ No version updates
          - ❌ No publications

          ### ⚙️ Workflow
          - Generated by: GitHub Actions
          - Trigger: Empty changesets detected
          - Next step: Automatic merge and cleanup

          ---
          *🤖 This is an automated pull request created by the release workflow*"
            LABELS="🤖 automated,🧹 chore,👷 ci"
          fi

          PR_INFO=$(gh pr create \
            --title "$TITLE" \
            --body "$BODY" \
            --base main \
            --head $NEW_BRANCH \
            --label "$LABELS")

          PR_NUMBER=$(echo "$PR_INFO" | grep -oE '[0-9]+' | head -1)
          PR_URL="https://github.com/$GITHUB_REPOSITORY/pull/$PR_NUMBER"

          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

          echo "🎉 Pull Request created successfully!"
          echo "📝 PR Number: #$PR_NUMBER"
          echo "🔗 PR URL: $PR_URL"
          echo "🌿 Branch: $NEW_BRANCH → main"
          echo "📋 Full response:"
          echo "$PR_INFO"

      - name: ⏱️ Wait for PR checks
        if: env.CHANGES == 'true'
        run: sleep 15

      - name: 🔀 Merge Release PR
        if: env.CHANGES == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -n "$PR_NUMBER" ]; then
            echo "🔄 Merging PR #$PR_NUMBER with admin privileges..."
            
            if [ "${{ steps.check.outputs.should_publish }}" = "true" ]; then
              MERGE_MSG="release: 🔖 merge automated version updates [skip ci]"
            else
              MERGE_MSG="chore: 🤖 merge changesets cleanup [skip ci]"
            fi
            
            gh pr merge $PR_NUMBER \
              --merge \
              --admin \
              --delete-branch \
              --body "$MERGE_MSG"
            echo "✅ PR merged successfully"
          else
            echo "❌ PR number not found"
            exit 1
          fi

  publish:
    name: 📦 Publish packages
    environment: Semver
    runs-on: ubuntu-latest
    needs: version-and-pr
    if: |
      needs.version-and-pr.outputs.has_changes == 'true' &&
      needs.version-and-pr.outputs.should_publish == 'true' &&
      needs.version-and-pr.result == 'success'
    outputs:
      design_system_published: ${{ steps.check_publish.outputs.design_system_published }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GH_TOKEN }}

      - name: 🔄 Pull latest changes from main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions@users.noreply.github.com"
          git pull origin main
          echo "✅ Main branch updated"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.6.5

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14
          registry-url: 'https://npm.pkg.github.com'
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🛠️ Build all packages
        run: pnpm run build:packages

      - name: � Publish packages
        id: publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc

          # Captura a versão publicada ANTES (autenticado)
          PUBLISHED_VERSION=$(npm view @nenoyago/design-system version 2>/dev/null || echo "none")
          LOCAL_VERSION=$(node -p "require('./projects/design-system/package.json').version")

          echo "published_before=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          echo "local_version=$LOCAL_VERSION" >> $GITHUB_OUTPUT

          echo "📦 Design System versions:"
          echo "  📚 Published on NPM: $PUBLISHED_VERSION"
          echo "  💻 Local version: $LOCAL_VERSION"

          # Publica os pacotes
          pnpm changeset publish
        continue-on-error: false

      - name: 🔍 Check if design-system was published
        id: check_publish
        run: |
          PUBLISHED_BEFORE="${{ steps.publish.outputs.published_before }}"
          LOCAL_VERSION="${{ steps.publish.outputs.local_version }}"

          echo "📊 Design System publication check:"
          echo "  📚 Was on NPM: $PUBLISHED_BEFORE"
          echo "  💻 Local version: $LOCAL_VERSION"

          # Se a versão local é diferente da publicada, significa que foi publicado agora
          if [ "$PUBLISHED_BEFORE" != "$LOCAL_VERSION" ] && [ "$PUBLISHED_BEFORE" != "none" ]; then
            echo "design_system_published=true" >> $GITHUB_OUTPUT
            echo "✅ Design System was published: $PUBLISHED_BEFORE → $LOCAL_VERSION"
          elif [ "$PUBLISHED_BEFORE" = "none" ]; then
            echo "design_system_published=true" >> $GITHUB_OUTPUT
            echo "✅ Design System was published for the first time: $LOCAL_VERSION"
          else
            echo "design_system_published=false" >> $GITHUB_OUTPUT
            echo "⏭️  Design System version unchanged: $LOCAL_VERSION"
          fi

      - name: 🎉 Publish summary
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 Packages published successfully!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          if [ "${{ steps.check_publish.outputs.design_system_published }}" = "true" ]; then
            echo "📚 Design System was published - Storybook will be deployed next"
          else
            echo "📚 Design System was not published - Storybook deployment skipped"
          fi
          echo ""

  deploy-storybook:
    name: 🎨 Deploy Storybook
    environment: Semver
    runs-on: ubuntu-latest
    needs: publish
    if: needs.publish.outputs.design_system_published == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.6.5

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14
          cache: 'pnpm'

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎨 Deploy to Chromatic
        uses: chromaui/action@latest
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          buildScriptName: 'build:storybook'
          exitZeroOnChanges: true
          autoAcceptChanges: true
          onlyChanged: true

      - name: 🎉 Storybook deployed
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 Storybook deployed to Chromatic!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🔗 https://main--68e56bc427fd47846235f3f9.chromatic.com/"
          echo ""
